# FLOWERS

# Michael LoCascio

import matplotlib.pyplot as plt
import numpy as np
import pickle

import visualization as vis

"""
This file collects the individual randomized cases of the multistart study
and computes average data: optimal AEP, solver time, and optimal layouts.

The ModelComparison objects are real from 'multi#.p' files generated by the
multistart.py script.
"""

# Number of random cases
multi = 10

# Initialize collected data
aep_flowers = np.zeros(multi)
aep_floris = np.zeros(multi)
time_flowers = np.zeros(multi)
time_floris = np.zeros(multi)

# Format plots
font = 14
plt.rc('font', size=font)          # controls default text sizes
plt.rc('axes', titlesize=font)     # fontsize of the axes title
plt.rc('axes', labelsize=font)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=font)    # fontsize of the tick labels
plt.rc('ytick', labelsize=font)    # fontsize of the tick labels
plt.rc('legend', fontsize=font-2)    # legend fontsize
plt.rc('figure', titlesize=font)  # fontsize of the figure title

# Superimposed layouts
_, (ax0, ax00) = plt.subplots(1,2, figsize=(12,4.75))

# AEP
_, (ax1, ax11) = plt.subplots(1,2, figsize=(12,4.75))

# Wind rose
fig = plt.figure(figsize=(6,4.75))
ax3 = fig.add_subplot(projection='polar')

# Plot generic initial layout
# layout_x = np.array([0, 666, 1333, 2000, 0, 622, 1245, 1867, 0, 578, 1155, 1733, 0, 533, 1067, 1600])
# layout_y = np.array([0, 0, 0, 0, 667, 622, 577, 533, 1333, 1244, 1155, 1067, 2000, 1867, 1734, 1600])
# ax2.plot(layout_x, layout_y, "o", markersize=13.5, color='#fde725')

for i in range(multi):

    # Read data from each case
    file_name = 'solutions/multi' + str(i) + '.p'
    sol = pickle.load(open(file_name,'rb'))
    time_flowers[i] = sol.flowers_solution['time']
    aep_flowers[i] = sol.aep_flowers
    time_floris[i] = sol.floris_solution['time']
    aep_floris[i] = sol.aep_floris

    # Plot optimal layouts
    ax0.plot(sol.flowers_layout[0]/sol.diameter, sol.flowers_layout[1]/sol.diameter, "o", markersize=6, color='#21918c', alpha=0.5)
    ax00.plot(sol.floris_layout[0]/sol.diameter, sol.floris_layout[1]/sol.diameter, "o", markersize=6, color='#21918c', alpha=0.5)

    if i == 1:
        sol.show_optimization_comparison(stats=True)
        sol.plot_optimal_layouts()
        sol.plot_optimization_histories(flowers_mov="flowers_1.mp4", floris_mov="floris_1.mp4")

# Plot optimal AEP and solver time
ax1.plot(time_flowers, aep_flowers/1e9, 'o', color='#440154')
ax11.plot(time_floris, aep_floris/1e9, 'o', color='#440154')

ax1.set(xlabel="Time (s)", ylabel="AEP (GWh)", xlim=0, title='FLOWERS')
ax1.grid(True)
ax11.set(xlabel="Time (s)", ylabel="AEP (GWh)", xlim=0, title="FLORIS")
ax11.grid(True)

# Plot wind farm boundary
verts = sol.boundaries/sol.diameter
for i in range(len(verts)):
    if i == len(verts) - 1:
        ax0.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        ax00.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
    else:
        ax0.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        ax00.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )

ax0.set(xlabel="x / D", ylabel="y / D", title='FLOWERS', aspect='equal')
ax00.set(xlabel="x / D", ylabel="y / D", title='FLORIS', aspect='equal')
ax0.grid()
ax00.grid()

# Plot wind rose
vis.plot_wind_rose(sol.wind_rose, ax=ax3)

# Output averaged results
print("================================")
print('Multistart Results    ')
print('Number of Cases:              {:.0f}'.format(multi))
print('FLOWERS Terms:                {:.0f}'.format(sol.terms_flowers))
print('FLORIS Bins:                  {:.0f}'.format(sol.bins_floris))
print()
print('FLOWERS AEP Mean:    {:.3f} GWh'.format(np.mean(aep_flowers) / 1e9))
print('FLOWERS AEP Std:       {:.3f} GWh'.format(np.std(aep_flowers) / 1e9))
print('FLORIS AEP Mean:     {:.3f} GWh'.format(np.mean(aep_floris) / 1e9))
print('FLORIS AEP Std:       {:.3f} GWh'.format(np.std(aep_floris) / 1e9))
print()
print('FLOWERS Time Mean:    {:.2f} s'.format(np.mean(time_flowers)))
print('FLOWERS Time Std:     {:.2f} s'.format(np.std(time_flowers)))
print('FLORIS Time Mean:     {:.2f} s'.format(np.mean(time_floris)))
print('FLORIS Time Std:      {:.2f} s'.format(np.std(time_floris)))
# print('Conv. Time Mean:     {:.2f} s'.format(np.mean(np.sort(time)[:-8])))
# print('Conv. Time Std:      {:.2f} s'.format(np.std(np.sort(time)[:-8])))
# print()
# print('Solution A AEP:  {:.3f} GWh'.format(aep[19] / 1e9))
# print('Solution B AEP:  {:.3f} GWh'.format(aep[71] / 1e9))
# print('Solution A Time:     {:.2f} s'.format(time[19]))
# print('Solution B Time:     {:.2f} s'.format(time[71]))
print("================================")
plt.show()