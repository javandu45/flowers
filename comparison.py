# FLOWERS

# Michael LoCascio

import matplotlib.pyplot as plt
import numpy as np
import pickle

import visualization as vis

"""
This file collects the individual randomized cases of the multistart study
and computes average data: optimal AEP, solver time, and optimal layouts.

The ModelComparison objects are real from 'sol#.p' files generated by the
optimization.py script.
"""

# Number of random cases
multi = 100

# Initialize collected data and plots
font = 14

plt.rc('font', size=font)          # controls default text sizes
plt.rc('axes', titlesize=font)     # fontsize of the axes title
plt.rc('axes', labelsize=font)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=font)    # fontsize of the tick labels
plt.rc('ytick', labelsize=font)    # fontsize of the tick labels
plt.rc('legend', fontsize=font-2)    # legend fontsize
plt.rc('figure', titlesize=font)  # fontsize of the figure title

aep = np.zeros(multi)
time = np.zeros(multi)

_, ax0 = plt.subplots(1,1, figsize=(12,4.75))
_, ax1 = plt.subplots(1,1, figsize=(8,4.75))
_, (axA, axB) = plt.subplots(1,2, figsize=(12,4.75))
fig = plt.figure(figsize=(12,4.75))
ax2 = fig.add_subplot(1, 2, 1)
ax3 = fig.add_subplot(1, 2, 2, projection='polar')
# figFF, (axAA, axBB) = plt.subplots(1,2, figsize=(12,4.75))

# Plot generic initial layout
layout_x = np.array([0, 666, 1333, 2000, 0, 622, 1245, 1867, 0, 578, 1155, 1733, 0, 533, 1067, 1600])
layout_y = np.array([0, 0, 0, 0, 667, 622, 577, 533, 1333, 1244, 1155, 1067, 2000, 1867, 1734, 1600])
ax2.plot(layout_x, layout_y, "o", markersize=13.5, color='#fde725')

for i in range(multi):

    # Read data from each case
    file_name = 'solutions/sol' + str(i) + '.p'
    sol = pickle.load(open(file_name,'rb'))
    time[i] = sol.flowers_performance['time']
    aep[i] = sol.aep_flowers

    # Plot optimal layouts
    ax0.plot(sol.flowers_layout[0], sol.flowers_layout[1], "o", markersize=13.5, color='#21918c', alpha=0.05)
    
    # Solution A
    if i == 19:
        axA.plot(sol.flowers_layout[0], sol.flowers_layout[1], "o", markersize=13.5, color='#5ec962')
        # vis.plot_flow_field(sol.flowers, axAA, np.array([[-100, 2100], [-100, 2100]]), cmin=4, cmax=8.5)
    
    # Solution B
    elif i == 71:
        axB.plot(sol.flowers_layout[0], sol.flowers_layout[1], "o", markersize=13.5, color='#3b528b')
        # im = vis.plot_flow_field(sol.flowers, axBB, np.array([[-100, 2100], [-100, 2100]]), cmin=4, cmax=8.5)

# Plot optimal AEP and solver time
ax1.plot(time, aep/1e9, 'o', color='#440154')
ax1.set(xlabel="Time (s)", ylabel="AEP (GWh)", xlim=0, ylim=[336, 339])
ax1.grid(True)

# Plot wind farm boundary
verts = sol.boundaries
for i in range(len(verts)):
    if i == len(verts) - 1:
        ax0.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        ax2.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        axA.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        axB.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        # axAA.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        # axBB.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
    else:
        ax0.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        ax2.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        axA.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        axB.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        # axAA.plot(
        #     [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        # )
        # axBB.plot(
        #     [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        # )

# Format plots
# cbar_ax = figFF.add_axes([0.9, 0.2, 0.025, 0.60])
# cbar = figFF.colorbar(im, cax=cbar_ax)
# cbar.set_ticks([4, 5, 6, 7, 8])
# cbar.set_label('U [m/s]')
ax0.set(xlabel="x (m)", ylabel="y (m)", aspect='equal')
ax2.set(xlabel="x (m)", ylabel="y (m)", aspect='equal')
axA.set(xlabel="x (m)", ylabel="y (m)", aspect='equal', title='Solution A')
axB.set(xlabel="x (m)", ylabel="y (m)", aspect='equal', title='Solution B')
# axAA.set(xlabel="x (m)", ylabel="y (m)", aspect='equal', title='Solution A')
# axBB.set(xlabel="x (m)", ylabel="y (m)", aspect='equal', title='Solution B')

ax0.grid()
ax2.grid()
axA.grid()
axB.grid()

# Plot wind rose
vis.plot_wind_rose(sol.wind_rose, ax=ax3)

# Output averaged results
print("============================")
print('Multistart Results    ')
print('Number of Cases: {:.0f}'.format(multi))
print('FLOWERS Terms: {:.0f}'.format(sol.terms_flowers))
print()
print('AEP Mean:        {:.3f} GWh'.format(np.mean(aep) / 1e9))
print('AEP Std:           {:.3f} GWh'.format(np.std(aep) / 1e9))
print('Time Mean:          {:.2f} s'.format(np.mean(time)))
print('Time Std:           {:.2f} s'.format(np.std(time)))
print('Conv. Time Mean:     {:.2f} s'.format(np.mean(np.sort(time)[:-8])))
print('Conv. Time Std:      {:.2f} s'.format(np.std(np.sort(time)[:-8])))
print()
print('Solution A AEP:  {:.3f} GWh'.format(aep[19] / 1e9))
print('Solution B AEP:  {:.3f} GWh'.format(aep[71] / 1e9))
print('Solution A Time:     {:.2f} s'.format(time[19]))
print('Solution B Time:     {:.2f} s'.format(time[71]))
print("============================")
plt.show()