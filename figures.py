# FLOWERS

# Michael LoCascio

import matplotlib.pyplot as plt
import numpy as np
import pickle

import tools as tl
import visualization as vis

"""
This file generates figures for the NAWEA/Wind Energy paper based on
the multistart study and computes average data: optimal AEP, solver time, 
and optimal layouts.

The ModelComparison objects are read from 'flowers_#.p' and 'floris_#.p' 
files generated by the multistart.py script.
"""

save = False

# Format plots
font = 14
plt.rc('font', size=font)          # controls default text sizes
plt.rc('axes', titlesize=font)     # fontsize of the axes title
plt.rc('axes', labelsize=font)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=font)    # fontsize of the tick labels
plt.rc('ytick', labelsize=font)    # fontsize of the tick labels
plt.rc('legend', fontsize=font-2)    # legend fontsize
plt.rc('figure', titlesize=font)  # fontsize of the figure title
plt_long = (13,5)
plt_short = (4.5,3)

color_flowers = "dodgerblue"
color_flowers_dark = "steelblue"
color_flowers_light = "lightskyblue"
color_floris = "indianred"
color_floris_dark = "firebrick"
color_floris_light = "lightcoral"
color_viridis = ['#fde725','#a0da39','#4ac16d','#1fa187','#277f8e','#365c8d','#46327e','#440154']
color_init = "gold"

# Initialize collected data
multi = 50
aep_initial = np.zeros(multi)
aep_flowers = np.zeros(multi)
aep_floris = np.zeros(multi)
time_flowers = np.zeros(multi)
time_floris = np.zeros(multi)

flowers_out = [10,33,42,43]
flowers_idx = np.arange(50)
flowers_idx = np.delete(flowers_idx,flowers_out)
flowers_idx = flowers_idx.tolist()

floris_out = [22,37]
floris_idx = np.arange(50)
floris_idx = np.delete(floris_idx,floris_out)
floris_idx = floris_idx.tolist()

################################
###### FARM AND WIND ROSE ######
################################

fig = plt.figure(figsize=plt_long)
ax0 = fig.add_subplot(121)
ax1 = fig.add_subplot(122, polar=True)

# Plot wind rose
wr = tl.load_wind_rose(1)
vis.plot_wind_rose(wr, ax=ax1)

# Plot generic initial layout
layout_x, layout_y, boundaries = tl.load_layout('iea', boundaries=True)
vis.plot_layout(layout_x, layout_y, ax=ax0, boundaries=boundaries, color=color_init)
fig.tight_layout()

if save:
    plt.savefig("../paper/farm.png", dpi=1000)


################################
####### POWER AND THRUST #######
################################

fig, (ax0, ax1) = plt.subplots(1,2,figsize=plt_long)

u = np.arange(26)
cp = np.zeros(len(u))
ct = np.zeros(len(u))

ct = tl.ct_lookup(u)
cp = tl.cp_lookup(u)

ax0.plot(u, ct, '-D', markersize=5, linewidth=2, color=color_viridis[2])
ax1.plot(u, cp, '-D', markersize=5, linewidth=2, color=color_viridis[7])

ax0.set(xlabel='Wind speed [m/s]', ylabel='$C_T$', ylim=0)
ax1.set(xlabel='Wind speed [m/s]', ylabel='$C_P$')
fig.tight_layout()

if save:
    plt.savefig("../paper/curves.png", dpi=1000)

################################
############ LAYOUTS ###########
################################

fig, (ax0, ax1) = plt.subplots(1,2,figsize=plt_long)

for i in range(multi):

    # Read data from each case
    file_name = 'solutions/flowers_' + str(i) + '.p'
    sol = pickle.load(open(file_name,'rb'))
    time_flowers[i] = sol.flowers_solution['time']
    aep_initial[i] = sol.aep_initial
    aep_flowers[i] = sol.aep_flowers
    if i in flowers_idx:
        ax0.plot(sol.layout_flowers[0]/sol.diameter, sol.layout_flowers[1]/sol.diameter, "o", markersize=6, color=color_flowers, alpha=0.5)
    
    file_name = 'solutions/floris_' + str(i) + '.p'
    sol = pickle.load(open(file_name,'rb'))
    time_floris[i] = sol.floris_solution['time']
    aep_floris[i] = sol.aep_floris
    if i in floris_idx:
        ax1.plot(sol.layout_floris[0]/sol.diameter, sol.layout_floris[1]/sol.diameter, "o", markersize=6, color=color_floris, alpha=0.5)

verts = boundaries/sol.diameter
for i in range(len(verts)):
    if i == len(verts) - 1:
        ax0.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
        ax1.plot([verts[i][0], verts[0][0]], [verts[i][1], verts[0][1]], "black")
    else:
        ax0.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )
        ax1.plot(
            [verts[i][0], verts[i + 1][0]], [verts[i][1], verts[i + 1][1]], "black"
        )

ax0.set(xlabel='x/D', ylabel='y/D', title='FLOWERS', aspect='equal')
ax0.grid(True)
ax1.set(xlabel='x/D', ylabel='y/D', title='Integral Gauss', aspect='equal')
ax1.grid(True)
fig.tight_layout()

if save:
    plt.savefig("../paper/layouts.png", dpi=1000)

################################
############ STATS #############
################################

gain_flowers = np.mean((aep_flowers - aep_initial)/aep_initial * 100)
gain_floris = np.mean((aep_floris - aep_initial)/aep_initial * 100)


fig, ax = plt.subplots(1,1,figsize=plt_long)
ax.plot(time_flowers[flowers_idx]/3600, aep_flowers[flowers_idx]/1e9, 'o', color=color_flowers, alpha=0.2)
ax.plot(time_floris[floris_idx]/3600, aep_floris[floris_idx]/1e9, 'o', color=color_floris, alpha=0.2)
v1 = ax.violinplot(
    time_flowers[flowers_idx]/3600, 
    vert=False, 
    widths=0.5, 
    positions=[np.mean(aep_flowers[flowers_idx]) / 1e9], 
    showmeans=True,
    showextrema=True
    )
v2 = ax.violinplot(
    time_floris[floris_idx]/3600, 
    vert=False, 
    widths=2.57, 
    positions=[np.mean(aep_floris[floris_idx]) / 1e9], 
    showmeans=True,
    showextrema=True
    )

for pc in v1['bodies']:
    pc.set_facecolor(color_flowers)
    pc.set_edgecolor(color_flowers_dark)
    pc.set_alpha(0.75)
v1['cmeans'].set_color(color_flowers_dark)
v1['cbars'].set_color(color_flowers_dark)
v1['cmins'].set_color(color_flowers_dark)
v1['cmaxes'].set_color(color_flowers_dark)

for pc in v2['bodies']:
    pc.set_facecolor(color_floris)
    pc.set_edgecolor(color_floris_dark)
    pc.set_alpha(0.75)
v2['cmeans'].set_color(color_floris_dark)
v2['cbars'].set_color(color_floris_dark)
v2['cmins'].set_color(color_floris_dark)
v2['cmaxes'].set_color(color_floris_dark)


ax.set(xlabel='Time [hr]', ylabel='Optimal AEP [GWh]', xlim=0)
ax.grid(True)
ax.legend(['_','_','FLOWERS','_','_','_','_','Integral Gauss'])
fig.tight_layout()

if save:
    plt.savefig("../paper/stats.png", dpi=1000)

print("================================")
print('Multistart Results    ')
print('Number of Cases:              {:.0f}'.format(multi))
print('FLOWERS Terms:                {:.0f}'.format(sol.terms_flowers))
print('FLORIS Bins:                  {:.0f}'.format(sol.bins_floris))
print()
print('FLOWERS AEP Mean:    {:.3f} GWh'.format(np.mean(aep_flowers[flowers_idx]) / 1e9))
print('FLOWERS AEP Std:       {:.3f} GWh'.format(np.std(aep_flowers[flowers_idx]) / 1e9))
print('FLOWERS Gain Mean:       {:.3f}%'.format(gain_flowers))
print('FLORIS AEP Mean:     {:.3f} GWh'.format(np.mean(aep_floris[floris_idx]) / 1e9))
print('FLORIS AEP Std:       {:.3f} GWh'.format(np.std(aep_floris[floris_idx]) / 1e9))
print('FLORIS Gain Mean:     {:.3f}%'.format(gain_floris))
print()
print('FLOWERS Time Mean:    {:.2f} hr'.format(np.mean(time_flowers[flowers_idx])/3600))
print('FLOWERS Time Std:     {:.2f} hr'.format(np.std(time_flowers[flowers_idx])/3600))
print('FLOWERS Time Median:    {:.2f} hr'.format(np.median(time_flowers[flowers_idx])/3600))
print('FLORIS Time Mean:     {:.2f} hr'.format(np.mean(time_floris[floris_idx])/3600))
print('FLORIS Time Std:      {:.2f} hr'.format(np.std(time_floris[floris_idx])/3600))
print('FLORIS Time Median:     {:.2f} hr'.format(np.median(time_floris[floris_idx])/3600))
print("================================")



################################
######## SELECTED CASE #########
################################
print(aep_flowers)
print(aep_floris)
print(time_flowers)
print(time_floris)
idx = 3
print("Average Case: {:.0f}".format(idx))
fig, (ax0, ax1) = plt.subplots(1,2,figsize=plt_long)

file_name = 'solutions/flowers_' + str(idx) + '.p'
sol = pickle.load(open(file_name,'rb'))
sol.plot_flowers_layout(ax=ax0, color_initial=color_init, color_final=color_flowers)
sol.show_flowers_optimization(stats=True)

file_name = 'solutions/floris_' + str(idx) + '.p'
sol = pickle.load(open(file_name,'rb'))
sol.plot_floris_layout(ax=ax1, color_initial=color_init, color_final=color_floris)
ax1.set(title='Integral Gauss')
sol.show_floris_optimization(stats=True)
fig.tight_layout()

if save:
    plt.savefig("../paper/case_average.png", dpi=1000)

idx = 48
print("Best Case: {:.0f}".format(idx))
fig, (ax0, ax1) = plt.subplots(1,2,figsize=plt_long)

file_name = 'solutions/flowers_' + str(idx) + '.p'
sol = pickle.load(open(file_name,'rb'))
sol.plot_flowers_layout(ax=ax0, color_initial=color_init, color_final=color_flowers)
sol.show_flowers_optimization(stats=True)

file_name = 'solutions/floris_' + str(idx) + '.p'
sol = pickle.load(open(file_name,'rb'))
sol.plot_floris_layout(ax=ax1, color_initial=color_init, color_final=color_floris)
ax1.set(title='Integral Gauss')
sol.show_floris_optimization(stats=True)
fig.tight_layout()

if save:
    plt.savefig("../paper/case_best.png", dpi=1000)

plt.show()