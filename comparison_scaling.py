# FLOWERS

# Michael LoCascio

import matplotlib.pyplot as plt
import numpy as np
import pickle
from pyoptsparse.pyOpt_history import History

import visualization as vis

"""
This file collects the individual randomized cases of the multistart study
and computes average data: optimal AEP, solver time, and optimal layouts.

The ModelComparison objects are real from 'multi#.p' files generated by the
multistart.py script.
"""

# Seeds and scales
multi = [0,1,4]
scales = [1, 5, 10, 50, 100, 500]

# Format plots
font = 14
plt.rc('font', size=font)          # controls default text sizes
plt.rc('axes', titlesize=font)     # fontsize of the axes title
plt.rc('axes', labelsize=font)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=font)    # fontsize of the tick labels
plt.rc('ytick', labelsize=font)    # fontsize of the tick labels
plt.rc('legend', fontsize=font-2)    # legend fontsize
plt.rc('figure', titlesize=font)  # fontsize of the figure title

# History
fig0, (ax00, ax01) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)
fig1, (ax10, ax11) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)
fig4, (ax40, ax41) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)
ax_flowers_history = [ax40, ax10, ax00]
ax_floris_history = [ax41, ax11, ax01]
fig_history = [fig4, fig1, fig0]

# Feasibility / Optimality
fig0F, ((ax00F, ax01F),(ax00O, ax01O)) = plt.subplots(2,2, figsize=(12,7.5))
fig1F, ((ax10F, ax11F),(ax10O, ax11O)) = plt.subplots(2,2, figsize=(12,7.5))
fig4F, ((ax40F, ax41F),(ax40O, ax41O)) = plt.subplots(2,2, figsize=(12,7.5))
ax_flowers_feas = [(ax40F,ax40O), (ax10F,ax10O), (ax00F,ax00O)]
ax_floris_feas = [(ax41F,ax41O), (ax11F,ax11O), (ax01F,ax01O)]
fig_feas = [fig4F, fig1F, fig0F]

# AEP
_, (ax2, ax3) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)

# Time
_, (ax4, ax5) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)

# Iterations
_, (ax6, ax7) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)

# FLOWERS Layouts
fig_flowers_0 = plt.figure(figsize=(14,7.5))
fig_flowers_1 = plt.figure(figsize=(14,7.5))
fig_flowers_4 = plt.figure(figsize=(14,7.5))
fig_flowers_layout = [fig_flowers_4, fig_flowers_1, fig_flowers_0]

# FLORIS Layouts
fig_floris_0 = plt.figure(figsize=(14,7.5))
fig_floris_1 = plt.figure(figsize=(14,7.5))
fig_floris_4 = plt.figure(figsize=(14,7.5))
fig_floris_layout = [fig_floris_4, fig_floris_1, fig_floris_0]

# Legend formatting
multi_str = [str(elem) for elem in multi]
scales_str = [str(elem) for elem in scales]

for j in multi:

    # Initialize collected data
    aep_flowers = []
    aep_floris = []
    time_flowers = []
    time_floris = []
    iter_flowers = []
    iter_floris = []

    if j == 0:
        color = '#440154'
    elif j == 1:
        color = '#21918c'
    else:
        color = '#fde725'

    idx = 1
    for i in scales:

        # Read FLOWERS data
        file_name = 'solutions/flowers_' + str(j) + '_scale_' + str(i) + '.p'
        sol = pickle.load(open(file_name,'rb'))
        aep_flowers.append(float(sol.aep_flowers)/1e9)
        time_flowers.append(float(sol.flowers_solution['time'])/3600)
        iter_flowers.append(float(sol.flowers_solution['iter']))

        ## TODO: remove this block
        hist = History('output/hist_flowers_' + str(j) + '_scale_' + str(i) + '.hist')
        val = hist.getValues(names=['feasibility','optimality','spacing_con','boundary_con'], major=True)
        val2 = hist.getValues(names=['boundary_con'], major=True)
        sol.flowers_solution['opt'] = val['optimality'].flatten()
        sol.flowers_solution['feas'] = val['feasibility'].flatten()
        sol.flowers_solution['con_bound'] = np.swapaxes(val['boundary_con'],0,1)
        sol.flowers_solution['con_space'] = val['spacing_con'].flatten()

        vis.plot_history(ax_flowers_history[-1], sol.flowers_solution['aep'], sol.flowers_solution['layout'], sol.boundaries, sol.diameter)
        vis.plot_constraints(ax_flowers_feas[-1][0], ax_flowers_feas[-1][1], sol.flowers_solution['con_bound'], sol.flowers_solution['con_space'])
        ax = fig_flowers_layout[-1].add_subplot(2,3,idx)
        sol.plot_flowers_layout(ax=ax)
        ax.set(title=str(i))
        ax.legend().set_visible(False)

        # Read FLORIS data
        file_name = 'solutions/floris_' + str(j) + '_scale_' + str(i) + '.p'
        sol = pickle.load(open(file_name,'rb'))

        # Store FLORIS data
        aep_floris.append(float(sol.aep_floris)/1e9)
        time_floris.append(float(sol.floris_solution['time'])/3600)
        iter_floris.append(float(sol.floris_solution['iter']))

        ## TODO: remove this block
        hist = History('output/hist_floris_' + str(j) + '_scale_' + str(i) + '.hist')
        val = hist.getValues(names=['feasibility','optimality','spacing_con','boundary_con'], major=True)
        sol.floris_solution['opt'] = val['optimality'].flatten()
        sol.floris_solution['feas'] = val['feasibility'].flatten()
        sol.floris_solution['con_bound'] = np.swapaxes(val['boundary_con'],0,1)
        sol.floris_solution['con_space'] = val['spacing_con'].flatten()

        # Plot FLORIS history and layouts
        vis.plot_history(ax_floris_history[-1], sol.floris_solution['aep'], sol.floris_solution['layout'], sol.boundaries, sol.diameter)
        vis.plot_constraints(ax_floris_feas[-1][0], ax_floris_feas[-1][1], sol.floris_solution['con_bound'], sol.floris_solution['con_space'])
        ax = fig_floris_layout[-1].add_subplot(2,3,idx)
        sol.plot_floris_layout(ax=ax)
        ax.set(title=str(i))
        ax.legend().set_visible(False)
        #  ax.legend(["Old Locations", "New Locations"], bbox_to_anchor=(-0.05, 1.25))
        idx += 1
            

    # Plot AEP, time, and iterations
    ax2.semilogx(scales, aep_flowers, 'o', color=color)
    ax3.semilogx(scales, aep_floris, 'o', color=color)
    ax4.semilogx(scales, time_flowers, 'o', color=color)
    ax5.semilogx(scales, time_floris, 'o', color=color)
    ax6.semilogx(scales, iter_flowers, 'o', color=color)
    ax7.semilogx(scales, iter_floris, 'o', color=color)

    # Plot formatting
    fig = fig_history.pop()
    fig.suptitle('Index ' + str(j))
    fig.tight_layout()
    fig = fig_feas.pop()
    fig.suptitle('Index ' + str(j))
    fig.tight_layout()
    fig = fig_flowers_layout.pop()
    fig.suptitle('FLOWERS Index ' + str(j))
    fig.tight_layout()
    fig = fig_floris_layout.pop()
    fig.suptitle('FLORIS Index ' + str(j))
    fig.tight_layout()
    # fig.tight_layout()
    ax_flowers_feas[-1][0].grid(True)
    ax_flowers_feas[-1][1].grid(True)
    ax_flowers_feas[-1][1].legend(scales_str)
    ax_flowers_feas[-1][0].set(title='FLOWERS')
    ax_flowers_feas.pop()
    ax_floris_feas[-1][0].grid(True)
    ax_floris_feas[-1][1].grid(True)
    ax_floris_feas[-1][1].legend(scales_str)
    ax_floris_feas[-1][0].set(title='FLORIS')
    ax_floris_feas.pop()
    ax_flowers_history[-1].grid(True)
    ax_flowers_history[-1].legend(scales_str)
    ax_flowers_history[-1].set(title='FLOWERS')
    ax_flowers_history.pop()
    ax_floris_history[-1].grid(True)
    ax_floris_history[-1].legend(scales_str)
    ax_floris_history[-1].set(title='FLORIS')
    ax_floris_history.pop()

# Gauss optimization
file_name = 'solutions/flowers_4.p'
sol_flowers = pickle.load(open(file_name,'rb'))
hist = History('output/hist_flowers_4.hist')
val = hist.getValues(names=['feasibility','optimality','spacing_con','boundary_con'], major=True)
sol_flowers.flowers_solution['opt'] = val['optimality'].flatten()
sol_flowers.flowers_solution['feas'] = val['feasibility'].flatten()
sol_flowers.flowers_solution['con_bound'] = np.swapaxes(val['boundary_con'],0,1)
sol_flowers.flowers_solution['con_space'] = val['spacing_con'].flatten()
file_name = 'solutions/floris_4.p'
sol_floris = pickle.load(open(file_name,'rb'))
hist = History('output/hist_floris_4.hist')
val = hist.getValues(names=['feasibility','optimality','spacing_con','boundary_con'], major=True)
sol_floris.floris_solution['opt'] = val['optimality'].flatten()
sol_floris.floris_solution['feas'] = val['feasibility'].flatten()
sol_floris.floris_solution['con_bound'] = np.swapaxes(val['boundary_con'],0,1)
sol_floris.floris_solution['con_space'] = val['spacing_con'].flatten()

fig80, (ax88, ax89) = plt.subplots(1,2, figsize=(12,4.75))
sol_flowers.plot_flowers_layout(ax=ax88)
sol_floris.plot_floris_layout(ax=ax89)

fig90, (ax98, ax99) = plt.subplots(1,2, figsize=(12,4.75), sharey=True)
sol_flowers.plot_flowers_history(ax=ax98)
sol_floris.plot_floris_history(ax=ax99)

fig100, ((ax101, ax102),(ax103, ax104)) = plt.subplots(2,2, figsize=(12,7.5))
vis.plot_constraints(ax101, ax103, sol_flowers.flowers_solution['con_bound'], sol_flowers.flowers_solution['con_space'])
vis.plot_constraints(ax102, ax104, sol_floris.floris_solution['con_bound'], sol_floris.floris_solution['con_space'])

print("============================")
print("Gauss Results")
print("----------------------------")
print("Initial AEP:      {:.3f} GWh".format(sol_flowers.aep_initial / 1.0e9))
print("FLORIS  AEP:      {:.3f} GWh".format(sol_floris.aep_floris / 1.0e9))
print("FLOWERS AEP:      {:.3f} GWh".format(sol_flowers.aep_flowers / 1.0e9))
print("FLORIS AEP Gain:       {:.2f}%".format((sol_floris.aep_floris - sol_floris.aep_initial) / sol_floris.aep_initial * 100))
print("FLOWERS AEP Gain:      {:.2f}%".format((sol_flowers.aep_flowers - sol_flowers.aep_initial) / sol_flowers.aep_initial * 100))
print("----------------------------")
print("FLOWERS Time:         {:.1f} s".format(sol_flowers.flowers_solution['time']))
print("FLORIS Time:          {:.1f} s".format(sol_floris.floris_solution['time']))
print("Speed-Up Factor:      {:.2f}x".format(sol_floris.floris_solution['time']/sol_flowers.flowers_solution['time']))
print()
print("FLOWERS AEP Evaluations:  {:.0f}".format(sol_flowers.flowers_solution['obj_calls']))
print("FLORIS AEP Evaluations:   {:.0f}".format(sol_floris.floris_solution['obj_calls']))
print("FLOWERS Iterations:       {:.0f}".format(sol_flowers.flowers_solution['iter']))
print("FLORIS Iterations:        {:.0f}".format(sol_floris.floris_solution['iter']))
print("============================")

# Plot formatting

ax2.set(xlabel="Scaling", ylabel="AEP (GWh)", title='FLOWERS')
ax2.grid(True)
ax3.set(xlabel="Scaling", ylabel="AEP (GWh)", title='FLORIS')
ax3.grid(True)
ax4.set(xlabel="Scaling", ylabel="Time (hr)", ylim=0, title='FLOWERS')
ax4.grid(True)
ax5.set(xlabel="Scaling", ylabel="Time (hr)", ylim=0, title='FLORIS')
ax5.grid(True)
ax6.set(xlabel="Scaling", ylabel="Iterations", ylim=0, title='FLOWERS')
ax6.grid(True)
ax7.set(xlabel="Scaling", ylabel="Iterations", ylim=0, title='FLORIS')
ax7.grid(True)

ax2.legend(multi_str)
ax4.legend(multi_str)
ax6.legend(multi_str)

fig80.suptitle('Gauss Optimization (Index 4)')
fig90.suptitle('Gauss Optimization (Index 4)')
ax88.legend().set_visible(False)
ax89.legend().set_visible(False)
ax101.set(title='FLOWERS')
ax102.set(title='FLORIS')

plt.show()